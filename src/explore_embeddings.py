# !/usr/bin/python
# -*- coding: utf-8 -*-
from gensim.models import KeyedVectors

""" Word vector explorer =========================================            

                                                     asahala 2021 

This script provides basic tools for making queries from word
vectors. 

"""

class VectorExplorer:

    def __init__(self):
        self.dictionary = {}
        self.vectors = None

    def read_vectors(self, filename):
        self.vectors = KeyedVectors.load_word2vec_format(filename)

    def read_dict(self, filename):
        """ Parse dictionary file for freqs + translations. This file is
        automatically generated by ´extract_corpus.py´ """
        with open(filename, 'r', encoding='utf-8') as data:
            self.dictionary = {l:{'freq':int(f), 'translation':t} for l,f,t in
                    (line.split('\t') for line in data.read().splitlines())}

    def _get_meta(self, word, key):
        if not self.dictionary:
            return {'translation': None, 'freq': None}[key]
        else:
            entry = self.dictionary.get(word, None)
            if entry is not None:
                return entry.get(key, None)

    def nearest_neighbors(self, word, num=10, min_freq=2):
        """ Find nearest neighbors and pretty print.
        Negative cosine similarities will be ignored.

        :param word            query word
        :param num             number of nearest neighbors
        :param min_freq        ignore neihgbors if rarer than this

        :type word             str
        :type num              int
        :type min_freq         int """

        translation = str(self._get_meta(word, 'translation'))

        """ Find word from vectors. If not found (e.g. CDA suffix is not
        there, try to recursively find similar words """
        if word not in self.vectors.vocab.keys():
            similar = (w for w in self.vectors.vocab.keys() 
                       if w.startswith(word))
            if similar:
                for s in similar:
                    self.nearest_neighbors(s, num, min_freq)
            else:
                print('> No vector for %s' % word)
        else:
            print('-'*64 + '\n' + word + ' ' + translation + '\n' + '-'*64)
            for lemma, cos_sim in self.vectors.most_similar(word, topn=10000):
                freq = self._get_meta(lemma, 'freq')
                translation = self._get_meta(lemma, 'translation')             
                if cos_sim < 0:
                    break
                if (freq is None or min_freq <= freq) and num:
                    num -= 1
                    print('{:<8f} {:<25s} {:<6s} {:<40s}'.format(
                        round(cos_sim, 6),
                        lemma,
                        str(freq),
                        str(translation)))

    def nn_by_translation(self, word, num=10, min_freq=2, start=False):
        """ Find words by using their English translations """
        if not self.dictionary:
            print('> Dictionary not available')
        else:
            for lemma, meta in self.dictionary.items():
                translations = meta['translation'].split(';')
                for t in translations:
                    if start and t.startswith(word):
                        self.nearest_neighbors(lemma, num, min_freq)
                    else:
                        if word in t:
                            self.nearest_neighbors(lemma, num, min_freq)

#explore = VectorExplorer()
#explore.read_vectors('akk.vec')
#explore.read_dict('akk_corpus_dict.tsv')
#explore.nearest_neighbors('abu_I', num=10, min_freq=2)
#explore.nn_by_translation('eat')
